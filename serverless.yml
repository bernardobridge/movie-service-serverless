service: movie-service

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage}
  region: eu-west-2
  environment:
    DDB_TABLE_NAME: ${self:custom.tableName}
    DEPLOYMENT_REGION: ${self:provider.region}
  deploymentBucket:
    name: bernardo-demo-deployment-bucket
    serverSideEncryption: AES256
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}
  
custom:
  tableName: ${self:service}-${self:provider.stage}

plugins:
  - serverless-deployment-bucket
  # - serverless-better-credentials

functions:
  getAllMovies:
    handler: handlers/get-all-movies.getAllMovies
    events:
      - http:
          path: movies
          method: get
          cors: true

  getMovieById:
    handler: handlers/get-movie-by-id.getMovieById
    events:
      - http:
          path: movies/{id}
          method: get
          cors: true

resources:
  Resources:
    MovieTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST